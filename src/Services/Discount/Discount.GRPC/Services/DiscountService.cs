using Discount.GRPC.Data;
using Discount.GRPC.Models;
using Grpc.Core;
using Mapster;
using Microsoft.EntityFrameworkCore;

namespace Discount.GRPC.Services;

/// <summary>
/// Declare service that will contain business logic for operations defined in proto file.
/// Extend from the classes autogenerated by the proto file.
/// 
/// Each method declared on the autogenerated class from our proto file definition, should be overrode to add actual business logic.
/// </summary>
public class DiscountService(DiscountContext discountContext, ILogger<DiscountService> logger) : DiscountProtoService.DiscountProtoServiceBase
{
  /// <summary>
  /// Triggered from proto file defined action, it will fetch coupons from the discountContext based on the product name provided from the message.
  /// </summary>
  /// <param name="request">Message body containing product name. Defined in proto file.</param>
  /// <param name="context"></param>
  /// <returns>Message coupon model with fetched coupon information.</returns>
  public override async Task<CouponModel> GetDiscount(GetDiscountRequest request, ServerCallContext context)
  {
    var coupon = await discountContext.Coupons.FirstOrDefaultAsync(x => x.ProductName == request.ProductName);
    if (coupon is null) coupon = new Coupon { ProductName = "No discount", Amount = 0, Description = "No discount desc" };

    logger.LogInformation("Discount is retrieved for ProductName: {productName}, Amount: {amount}.", coupon.ProductName, coupon.Amount);

    return coupon.Adapt<CouponModel>();

  }

  /// <summary>
  /// Triggered from proto file defined action, it will create a new coupon into the discountContext based on the coupon provided in the message.
  /// </summary>
  /// <param name="request">Message body containing coupon details. Defined in proto file.</param>
  /// <param name="context"></param>
  /// <returns>Message coupon model with created coupon information.</returns>
  public override async Task<CouponModel> CreateDiscount(CreateDiscountRequest request, ServerCallContext context)
  {
    var coupon = request.Coupon.Adapt<Coupon>();
    if (coupon is null) throw new RpcException(new Status(StatusCode.InvalidArgument, "Invalid request object."));

    discountContext.Coupons.Add(coupon);
    await discountContext.SaveChangesAsync();

    logger.LogInformation("Discount is successfully created. ProductName: {ProductName}.", coupon.ProductName);

    return coupon.Adapt<CouponModel>();
  }

  /// <summary>
  /// Triggered from proto file defined action, it will update an existing cupon with the coupon model details inside the message, 
  /// into the discountContext based on the coupon name provided.
  /// </summary>
  /// <param name="request">Message body with the new details for the indicated coupon. Defined in proto file.</param>
  /// <param name="context"></param>
  /// <returns>Refered coupon on its final state after completing the action.</returns>
  public override async Task<CouponModel> UpdateDiscount(UpdateDiscountRequest request, ServerCallContext context)
  {
    var coupon = request.Coupon.Adapt<Coupon>();
    if (coupon is null) throw new RpcException(new Status(StatusCode.InvalidArgument, "Invalid request object."));

    discountContext.Coupons.Update(coupon);
    await discountContext.SaveChangesAsync();

    logger.LogInformation("Discount is successfully updated. ProductName: {ProductName}.", coupon.ProductName);

    return coupon.Adapt<CouponModel>();
  }

  /// <summary>
  /// Triggered from proto file defined action, it will delete an existing cupon with the coupon name provided in the message.
  /// </summary>
  /// <param name="request">Message body with the coupon name to delete. Defined in proto file.</param>
  /// <param name="context"></param>
  /// <returns>Status of the action, either true or false.</returns>
  public override async Task<DeleteDiscountResponse> DeleteDiscount(DeleteDiscountRequest request, ServerCallContext context)
  {
    var coupon = await discountContext.Coupons.FirstOrDefaultAsync(x => x.ProductName == request.ProductName);

    if (coupon is null) throw new RpcException(new Status(StatusCode.NotFound, $"Discount with ProductName={request.ProductName} was not found."));

    discountContext.Coupons.Remove(coupon);
    await discountContext.SaveChangesAsync();

    logger.LogInformation("Discount was successfully deleted. ProductName: {ProductName}.", request.ProductName);
    return new DeleteDiscountResponse { IsSuccess = true };
  }
}
